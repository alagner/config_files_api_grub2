require_relative "spec_helper"
require "cfa/grub2/device_map"
require "cfa/memory_file"

describe CFA::Grub2::DeviceMap do
  let(:memory_file) do
    CFA::MemoryFile.new(
      "# generated by Josef\n"\
      "(hd1) /dev/sda\n" \
      "(hd0) /dev/sdb\n"
    )
  end
  let(:config) do
    res = CFA::Grub2::DeviceMap.new(file_handler: memory_file)
    res.load
    res
  end

  describe "#grub_device_for" do
    it "returns grub device for specified system device" do
      expect(config.grub_device_for("/dev/sda")).to eq "hd1"
    end

    it "returns nil if there is no mapping for given device" do
      expect(config.grub_device_for("/dev/sdx")).to eq nil
    end
  end

  describe "#system_device_for" do
    it "returns system device for specified grub device" do
      expect(config.system_device_for("hd1")).to eq "/dev/sda"
    end

    it "returns nil if there is no mapping for given device" do
      expect(config.system_device_for("hd5")).to eq nil
    end
  end

  describe "#add_mapping" do
    it "adds new map entry to configuration" do
      config.add_mapping("hd2", "/dev/sdc")
      config.save

      expect(memory_file.content).to eq(
        "# generated by Josef\n"\
        "(hd1) /dev/sda\n" \
        "(hd0) /dev/sdb\n" \
        "(hd2)\t/dev/sdc\n"
      )
    end

    it "overwrites entry if grub device is already used" do
      config.add_mapping("hd1", "/dev/sdc")
      config.save

      expect(memory_file.content).to eq(
        "# generated by Josef\n"\
        "(hd1) /dev/sdc\n" \
        "(hd0) /dev/sdb\n"
      )
    end
  end

  describe "#remove_mapping" do
    it "removes entry from configuration" do
      config.remove_mapping("hd1")
      config.save

      expect(memory_file.content).to eq(
        "# generated by Josef\n"\
        "(hd0) /dev/sdb\n"
      )
    end

    it "do nothing if grub device is not in file" do
      config.remove_mapping("hd2")
      config.save

      expect(memory_file.content).to eq(
        "# generated by Josef\n"\
        "(hd1) /dev/sda\n" \
        "(hd0) /dev/sdb\n"
      )
    end
  end

  describe "grub_devices" do
    it "returns list of all grub devices with mapping" do
      expect(config.grub_devices).to eq(["hd1", "hd0"])
    end
  end

  describe "#save" do
    it "raise exception if more then 8 grub devices is used" do
      config.add_mapping("hd2", "/dev/sdc")
      config.add_mapping("hd3", "/dev/sdc")
      config.add_mapping("hd4", "/dev/sdc")
      config.add_mapping("hd5", "/dev/sdc")
      config.add_mapping("hd6", "/dev/sdc")
      config.add_mapping("hd7", "/dev/sdc")
      config.add_mapping("hd8", "/dev/sdc")

      expect{config.save}.to raise_error(/limit/i)
    end
  end
end
